{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","userId","changeUserId","useState","filteredTodos","setFilteredTodos","query","setQuery","option","setOption","Object","todie","setTodie","checked","setChecked","useEffect","filter","todo","title","includes","toLowerCase","completed","className","type","value","onChange","event","target","map","classNames","readOnly","onClick","id","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","clearUsers","user","setUser","getUserbyId","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","loaded","setLoaded","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfb237ed.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  changeUserId: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  userId,\n  changeUserId,\n}) => {\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [option, setOption] = useState('');\n  const [todie, setTodie] = useState<Todo>(Object);\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    setFilteredTodos(todos.filter(todo => {\n      if (todo.title.includes(query.toLowerCase())) {\n        switch (option) {\n          case 'all':\n            return true;\n\n          case 'done':\n            return todo.completed;\n\n          case 'active':\n            return !todo.completed;\n\n          default:\n            return true;\n        }\n      }\n\n      return false;\n    }));\n  }, [todos, query, option]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <label>\n          Filter\n          <input\n            type=\"text\"\n            value={query}\n            className=\"TodoList__input\"\n            data-cy=\"filterByTitle\"\n            onChange={event => {\n              setQuery(event.target.value);\n            }}\n          />\n        </label>\n        <select\n          onChange={event => {\n            setOption(event.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"done\">Done</option>\n          <option value=\"active\">Active</option>\n        </select>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n            >\n              <label>\n                <>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onChange={() => {\n                      setTodie(todo);\n                      todie.completed = true;\n\n                      setChecked(!checked);\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </>\n              </label>\n\n              <button\n                className={classNames('button', {\n                  'TodoList__user-button': true,\n                  'TodoList__user-button--selected': userId === todo.userId,\n                })}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  changeUserId(todo.userId);\n                }}\n              >\n                User\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserbyId = (userId: number) => request(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { getUserbyId } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearUsers: (userId: number)=> void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUsers }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUserbyId(userId)\n      .then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {userId}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"button button--center\"\n            onClick={() => clearUsers(0)}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loaded, setLoaded] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .then(() => setLoaded(true));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {loaded && (\n        <>\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              userId={selectedUserId}\n              changeUserId={setSelectedUserId}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUsers={setSelectedUserId}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}